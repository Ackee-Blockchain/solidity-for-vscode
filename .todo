
Frontend:
    Inputs:
        ✔ setting [2,3,4] to uint256[] throw an error at root @done(24-06-18 11:39)
            solved with multitype input
        ✘ be able to set a new input length @cancelled(24-06-18 13:20)
            idk waht i meant which this
        ✔ be able to set ListInput to [] @done(24-06-18 13:19)
            "[]" gets replaced by undefined, but seems like the tx still goes thru
            or maybe add a check that the input cannot be undefined?
            or if it is undefined, dont encode any data? is that ok?
            if a list is empty, should the call data be just the func selector OR empty bytes?
                -> there will be bytes, because you have to define list length
            ✔ [] gets transformed into '', which can be sent @done(24-06-18 13:10)
        ✔ be able to set value undefined @done(24-06-18 13:10)
            just remove any value
        ✔ be able to delete contracts as well @done(24-06-18 13:19)
            seems to be working
        ☐ state mutability payable @critical @started(24-05-08 18:16)
            ✔ if a function is payable, the value is enabled. otherwise no @done(24-06-18 13:32)
            ☐ but maybe add a different color? or maybe an icon which highlights that a function is payable
        ✔ tuple with a single string does not get parsed if not expanded @done(24-06-18 12:53)
        ✘ enums @cancelled(24-06-18 12:45)
            cannot be done currently, as the enum is not in the abi
        ☐ fix pressing +/- closes expanded state
            not a pressing issue
        ✔ bar fails with set [(123,[1,2,3],[(mimimi),(mamama)])] @done(24-06-17 17:27)
        ✔ strings in tuples (and maybe also lists) dont have "" @done(24-06-18 13:09)
            what do i do about this. this should only be the case when the value is unexpanded.
            if the stirng is being added at leaf, no "" should be there i guess
            ✔ done, strings have "" @done(24-06-18 13:09)
        ✔ remove trailing whiteline, in that case input fails to be encoded @done(24-06-15 17:03)
        ☐ save inputs into some state (so they dont get lost when run tab is closed)
        [] add visible error border to input on error
        [] refactor so taht all inputs have a valid property
        [] when removing a variable, first its undefined and then after removing it again its "" wtf
        ☐ fixed being able to change static list size to 0
        [] Multitype input does not reset its state to empty when all values are empty

    Other:
        ✔ history of txs @done(24-06-15 16:41)
        ☐ maybe add option to save a function call (with params)

    Compile:
        ✘ ui should show all solidity files in current workspace @next @cancelled(24-06-18 13:19)
            listen to changes, when a new file is created etc. show it in the ui
            when something is deleted, hide it
            ✔ solved, compilation is done all in bulk so no file selection @done(24-06-18 13:19)

    Ideas:
        ☐ Button for opening a contract abi in a bigger window (with additional functionality)?
        ☐ network could be chosen via top box, and the current network could be displayed in the bottom row maybe.
           i dont think the network should be inside the sidebar
        ☐ add a config where this is specified? like sake.toml or something
        ☐ accs could have colors?

Backend:
    ✔ refactor the state stuff, prob should be a separate class for each state with its own functions @done(24-05-07 11:51)

General:
    ☐ preserve state between webview switching @critical
        ☐ on webview reset, load data from state @critical
    ✔ join types and interfaces (now extension and webview have them separate) @done(24-05-08 17:55)
        ☐ resolve the enum issue
    ☐ i jsut need to add the enums to shared @warning
        ☐ also add enums for message names
        ☐ rename deployContract to onDeploy, everything which is an event should start with on

Non-Critical:
    ✔ Single parent class for sidebar providers @done(24-05-07 09:36)

Brainstorming:
    ☐ Convert TX history to Wake code/Run current wake code on the network
    [] the card element oculd be similar to code block in ai chat
    ✔ text input for function call when card is collased @done(24-05-20 10:52)
        - just could write the function, again similar as in chat... could be quick
    ☐ lsp hint above function to call it?
    ☐ how to simplify ui
        - instead of listing all the deployed contracts, maybe use a dropdown?
    ☐ output channel idea
        - something liek the terminal, split horizontally into 2 parts, the right little part would be the history of txs,
        - the left would just output the given selected tx

    ☐ maybe add a button to the sidebar to open the output channel

    IDEA TO MAKE THE RUN CONTRACT INTERFACE MORE READABLE @critical
        - for each function, the function button would be full width, and if there would be any input, this would be below
        - the "input below" could be expandable, basicaly how it works now

    - could i use os-native dropdowns? would improve space


TfS Integration:
    how it will work
        will use lsp protocol
            notifikace or message/requests   resposne bude json
        see printersHandler.ts
    ✔ define messages and types whcih will be sent to lsp wake side @done(24-06-03 15:53)
    ✔ validation at frontend @done(24-06-18 13:33)
        yess

Worklog:
    ✔ wake compilation fix @done(24-06-03 15:33)
    ✔ compilation and deployment api @done(24-06-03 15:33)
    ✔ constructor frontend @done(24-06-03 15:53)
        ☐ kinda
    ✔ simplified updateState @done(24-06-03 20:09)
    ✔ join compile + deploy, refactor @done(24-06-03 20:13)
    ☐ calldata computation wiwht ethjs
        ✔ for simple types @done(24-06-05 23:46)
        ✔ for constructors @done(24-06-05 23:46)
        ☐ test for dynamic types, arrays, structs
    ✔ call api @done(24-06-18 13:45)
        ✔ well it works, but usually does not return anything @done(24-06-05 23:52)
        ✔ fix this @done(24-06-14 09:41)
        ✔ return tx @done(24-06-14 09:42)
        ✔ calltrace working with newest wake @done(24-06-14 09:42)
    ☐ hide deploy window until compilation has happened
    - if function (and value also) is not payable, dont allow value
        - should i raise an error/info if value is set? or set value to 0 for simplicity
        - does calling a not payable function with a value revert?
        - prob doesn ot matter
    ☐ handling of errors during api, if wake results in err, compiling buttons stays disabled
    ☐ handling of errors due to bad input
    ☐ migrate to types from web3

    ✔ handle error when abi cannot encode calldata @done(24-06-14 11:32)
    ☐ get func selector (right click on function or something)
    ☐ outputChannel to TreeView
    ☐ option to send raw calldata to contract
    ☐ output
        ☐ separate from tfs
        ☐ better displaying of jsons
    ☐ getBalances, setBalances
        ☐ api
        ☐ frontend
    ☐ fix theming
    ☐ rename WebviewMessage to WebviewMessageId
    ☐ add view progress during api calls
        - see https://code.visualstudio.com/api/ux-guidelines/views#views-with-progress

    ☐ remove the compilation loading button maybe, and move the loading indicator to the bottom blue row in vscode
    [] dont allow compilation when no solidity files are in the workspace
    [] split input string correction/validation and parsing into 2 separate function
        ☐ this means input handlers would have a stringValue and an actualValue
        the string value would be the one inputted by the user and corrected - 10ether -> 10 ether
        the actual value would be the one used for computation - 10 ether -> 10000000000000000000

    ☐ be able to set name of contract

    ☐ api calls
        - i probably need to change the api calls to return the actual data instead of boolean
        - if anything goes wrong, just throw...

    Output:
        ☐ add icons
        ☐ show output from deployment in output tree
        ☐ add state for history
        ☐ add button in output tree to show history
        ☐ instead of TxOutput use TxDeploymentOutput and TxCallOutput
        ☐ txoutput success will show true even on revert


    ☐ add this visibility
        - what happens when a deployed contract gets updated and recompiled.
        - this should be somehow visible on the ui that the contract is outdated

    [] if state data is already saved, you dont have to query wake always
        - prob implement this in sake.ts

    [] for validation look if web3js has some funcs

    [] add loader while loading window
    [
    [] fix the setBalances ui
        ✔ add better display of balance, also be able to parse balance from string @done(24-06-27 09:10)

    [] try to use the icon api and remove the icon classes

    ✔ add copy to clipboard command @done(24-06-23 10:31)
    remove unused commands
    remove hardcoded webviewmessage strings
    ✔ api call for getWakeVersion @critical @done(24-06-27 09:10)
        ✔ no need @done(24-06-27 09:10)
    ✔ deploy filter @done(24-06-22 23:50)
    ✔ move input warning inside input box @done(24-06-27 09:10)

    ☐ calltrace parsing


Questions for User Testing:
    ☐ in history, what data is important to you to see at first glance
    [] topUp or set acc balance?




Now:
    ✔ nicks for deployed contracts @done(24-06-27 11:33)
    ✔ calldata fix @done(24-06-27 11:44)
    ✔ fix input issues @done(24-06-27 13:51)
        double check everything
    ✔ calltrace parsing @done(24-06-28 08:57)
    fix css issues when windows is to onarrow
    ✔ welcome page @done(24-07-01 21:17)
    fix types, use types from web3
        but first fix web3 circ dep, or migrate to ethers
    ✔ fixed output return parsing @done(24-07-01 22:36)
        waht about nested return data, currently not really supported
    be able to copy output data
    automatically convert hex to integers


Ideas after v0.1:
    - playground mode - opens a single window with a contract
        for example, i wanted to check if array overflow triggers an error
        this way i could easily check


