{
    "name": "tools-for-solidity",
    "displayName": "Tools for Solidity (Wake)",
    "version": "1.11.3",
    "publisher": "ackeeblockchain",
    "description": "Advanced Solidity support and vulnerability detectors developed by Ackee Blockchain",
    "keywords": [
        "solidity",
        "ethereum",
        "blockchain",
        "review",
        "audit",
        "security",
        "compiler",
        "solidity security"
    ],
    "homepage": "https://ackeeblockchain.com/blog/introducing-tools-for-solidity/",
    "bugs": {
        "url": "https://github.com/Ackee-Blockchain/tools-for-solidity-vscode/issues"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/Ackee-Blockchain/tools-for-solidity-vscode.git"
    },
    "icon": "images/icon.png",
    "engines": {
        "vscode": "^1.67.0"
    },
    "categories": [
        "Linters",
        "Programming Languages"
    ],
    "activationEvents": [
        "onLanguage:solidity",
        "workspaceContains:**/*.sol",
        "onLanguage:wake-output"
    ],
    "main": "./dist/extension",
    "contributes": {
        "configuration": [
            {
                "title": "Configuration",
                "order": -2,
                "properties": {
                    "wake.configuration.use_toml_if_present": {
                        "type": "boolean",
                        "default": true,
                        "description": "Use the configuration TOML file if present instead of the VS Code settings."
                    },
                    "wake.configuration.toml_path": {
                        "type": "string",
                        "default": "wake.toml",
                        "description": "Path to the TOML configuration file relative to the workspace root."
                    }
                }
            },
            {
                "title": "Tools for Solidity",
                "order": -1,
                "properties": {
                    "Tools-for-Solidity.trace.server": {
                        "scope": "window",
                        "type": "string",
                        "enum": [
                            "off",
                            "messages",
                            "verbose"
                        ],
                        "default": "off",
                        "description": "Traces the communication between VS Code and the language server."
                    },
                    "Tools-for-Solidity.Wake.autoInstall": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Automatically install 'wake-eth' PyPi package needed by Tools for Solidity."
                    },
                    "Tools-for-Solidity.Wake.usePipx": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Use pipx (if available) to install 'wake-eth' PyPi package if auto-install is enabled."
                    },
                    "Tools-for-Solidity.Wake.pathToExecutable": {
                        "type": "string",
                        "description": "Path to Wake executable, overrides Tools-for-Solidity.Wake.autoInstall."
                    },
                    "Tools-for-Solidity.Wake.port": {
                        "type": "integer",
                        "description": "Port on which Wake is listening. Overrides both Tools-for-Solidity.Wake.autoInstall and Tools-for-Solidity.Wake.pathToExecutable."
                    },
                    "Tools-for-Solidity.uuid": {
                        "type": "string",
                        "description": "Installation UUID (Random generated locally, used only for anonymous active installations tracking)."
                    }
                }
            },
            {
                "title": "Compiler",
                "order": 0,
                "properties": {
                    "wake.compiler.solc.allow_paths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [],
                        "description": "Allow paths passed directly to the solc compiler."
                    },
                    "wake.compiler.solc.evm_version": {
                        "type": "string",
                        "enum": [
                            "homestead",
                            "tangerineWhistle",
                            "spuriousDragon",
                            "byzantium",
                            "constantinople",
                            "petersburg",
                            "istanbul",
                            "berlin",
                            "london",
                            "paris",
                            ""
                        ],
                        "default": "",
                        "description": "EVM version passed to the solc compiler."
                    },
                    "wake.compiler.solc.exclude_paths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [
                            "node_modules",
                            "venv",
                            "lib",
                            "script",
                            "test"
                        ],
                        "description": "Files in these paths are excluded from LSP analysis unless imported from other non-excluded files."
                    },
                    "wake.compiler.solc.include_paths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [
                            "node_modules"
                        ],
                        "description": "Include paths used to search for non-relative import paths."
                    },
                    "wake.compiler.solc.remappings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [],
                        "markdownDescription": "Compiler remappings (see [Solidity docs](https://docs.soliditylang.org/en/latest/using-the-compiler.html#base-path-and-import-remapping))."
                    },
                    "wake.compiler.solc.target_version": {
                        "type": "string",
                        "default": "",
                        "description": "The version of the solc compiler used to compile all project files."
                    },
                    "wake.compiler.solc.via_IR": {
                        "type": [
                            "boolean",
                            "null"
                        ],
                        "default": null,
                        "enum": [
                            null,
                            true,
                            false
                        ],
                        "markdownDescription": "Compile the code via the Yul intermediate language (see [Solidity docs](https://docs.soliditylang.org/en/latest/ir-breaking-changes.html)). If not set (null), let the compiler decide."
                    },
                    "wake.compiler.solc.optimizer.enabled": {
                        "type": [
                            "boolean",
                            "null"
                        ],
                        "default": null,
                        "enum": [
                            null,
                            true,
                            false
                        ],
                        "description": "Compile the project with solc optimizations enabled. Setting this to 'null' (unset) disables most of the available optimizations. Setting this to 'false' disables all optimizations for Solidity <0.8.6 and has the same behavior as 'null' for Solidity >=0.8.6."
                    },
                    "wake.compiler.solc.optimizer.runs": {
                        "type": "number",
                        "default": 200,
                        "description": "Configuration of the optimizer specifying how many times the code is intended to be run. Lower values optimize more for initial deployment cost, while higher values optimize more for high-frequency usage."
                    }
                }
            },
            {
                "title": "Detections",
                "order": 1,
                "properties": {
                    "Tools-for-Solidity.detections.groupBy": {
                        "type": "string",
                        "enum": [
                            "IMPACT",
                            "FILE",
                            "CONFIDENCE",
                            "DETECTOR"
                        ],
                        "default": "IMPACT",
                        "order": -3,
                        "markdownDescription": "Grouping criteria of detections in Wake Detections UI."
                    },
                    "Tools-for-Solidity.detections.filterImpact": {
                        "type": "string",
                        "enum": [
                            "HIGH",
                            "MEDIUM",
                            "LOW",
                            "WARNING",
                            "INFO"
                        ],
                        "order": -2,
                        "default": "INFO",
                        "markdownDescription": "Minimum impact of detections shown in Wake Detections UI."
                    },
                    "Tools-for-Solidity.detections.filterConfidence": {
                        "type": "string",
                        "enum": [
                            "HIGH",
                            "MEDIUM",
                            "LOW"
                        ],
                        "default": "LOW",
                        "order": -1,
                        "markdownDescription": "Minimum confidence of detections shown in Wake Detections UI."
                    },
                    "wake.detectors.exclude": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [],
                        "description": "List of detectors (identified by their string or integer IDs) to exclude from the analysis."
                    },
                    "wake.detectors.only": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [],
                        "description": "List of detectors (identified by their string or integer IDs) to only use in the analysis."
                    },
                    "wake.detectors.ignore_paths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [
                            "test",
                            "venv"
                        ],
                        "description": "Any (sub)detections ending in these paths are removed. Intended for project Solidity test files."
                    },
                    "wake.detectors.exclude_paths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [
                            "node_modules",
                            "lib"
                        ],
                        "description": "A detection is removed if whole (including subdetections) ends up in these paths. Intended for project Solidity dependencies."
                    }
                }
            },
            {
                "title": "Graphs",
                "order": 2,
                "properties": {
                    "wake.generator.control_flow_graph.direction": {
                        "type": "string",
                        "enum": [
                            "TB",
                            "BT",
                            "LR",
                            "RL"
                        ],
                        "default": "TB",
                        "markdownDescription": "The direction of the generated control flow graph (see [Graphviz docs](https://graphviz.org/docs/attrs/rankdir/))."
                    },
                    "wake.generator.control_flow_graph.vscode_urls": {
                        "type": "boolean",
                        "default": true,
                        "description": "Generate vscode:// URLs in the generated control flow graph."
                    },
                    "wake.generator.imports_graph.direction": {
                        "type": "string",
                        "enum": [
                            "TB",
                            "BT",
                            "LR",
                            "RL"
                        ],
                        "default": "TB",
                        "markdownDescription": "The direction of the generated imports graph (see [Graphviz docs](https://graphviz.org/docs/attrs/rankdir/))."
                    },
                    "wake.generator.imports_graph.imports_direction": {
                        "type": "string",
                        "enum": [
                            "imported-to-importing",
                            "importing-to-imported"
                        ],
                        "default": "imported-to-importing",
                        "markdownDescription": "The direction of arrows in the generated imports graph."
                    },
                    "wake.generator.imports_graph.vscode_urls": {
                        "type": "boolean",
                        "default": true,
                        "description": "Generate vscode:// URLs in the generated imports graph."
                    },
                    "wake.generator.inheritance_graph.direction": {
                        "type": "string",
                        "enum": [
                            "TB",
                            "BT",
                            "LR",
                            "RL"
                        ],
                        "default": "BT",
                        "markdownDescription": "The direction of the generated inheritance graph (see [Graphviz docs](https://graphviz.org/docs/attrs/rankdir/))."
                    },
                    "wake.generator.inheritance_graph.vscode_urls": {
                        "type": "boolean",
                        "default": true,
                        "description": "Generate vscode:// URLs in the generated inheritance graph."
                    },
                    "wake.generator.inheritance_graph_full.direction": {
                        "type": "string",
                        "enum": [
                            "TB",
                            "BT",
                            "LR",
                            "RL"
                        ],
                        "default": "BT",
                        "markdownDescription": "The direction of the inheritance graph generated for the whole project (see [Graphviz docs](https://graphviz.org/docs/attrs/rankdir/))."
                    },
                    "wake.generator.inheritance_graph_full.vscode_urls": {
                        "type": "boolean",
                        "default": true,
                        "description": "Generate vscode:// URLs in the inheritance graph generated for the whole project."
                    }
                }
            },
            {
                "title": "LSP",
                "order": 3,
                "properties": {
                    "wake.lsp.compilation_delay": {
                        "type": "number",
                        "default": 0,
                        "description": "Delay in seconds before the project is compiled after a keystroke."
                    },
                    "wake.lsp.code_lens.enable": {
                        "type": "boolean",
                        "default": true,
                        "description": "Enable code lens with number of references."
                    },
                    "wake.lsp.detectors.enable": {
                        "type": "boolean",
                        "default": true,
                        "description": "Enable Wake vulnerability detectors."
                    },
                    "wake.lsp.find_references.include_declarations": {
                        "type": "boolean",
                        "default": false,
                        "description": "Also include declarations in 'Go to references' results."
                    }
                }
            }
        ],
        "languages": [
            {
                "id": "solidity",
                "extensions": [
                    ".sol"
                ],
                "aliases": [
                    "Solidity",
                    "sol"
                ],
                "configuration": "./language-configuration.json"
            },
            {
                "id": "tools-for-solidity-output",
                "extensions": [
                    ".output"
                ],
                "configuration": "./resources/log.configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "solidity",
                "scopeName": "source.solidity",
                "path": "./syntaxes/solidity.tmLanguage.json"
            },
            {
                "language": "tools-for-solidity-output",
                "scopeName": "source.wake.output",
                "path": "./syntaxes/log.configuration.json"
            }
        ],
        "commands": [
            {
                "command": "Tools-for-Solidity.generate.imports_graph",
                "title": "Tools for Solidity: Generate Imports Graph"
            },
            {
                "command": "Tools-for-Solidity.generate.inheritance_graph",
                "title": "Tools for Solidity: Generate Inheritance Graph"
            },
            {
                "command": "Tools-for-Solidity.foundry.import_remappings",
                "title": "Tools for Solidity: Import Foundry Remappings"
            },
            {
                "command": "Tools-for-Solidity.coverage.show",
                "title": "Tools for Solidity: Show Coverage"
            },
            {
                "command": "Tools-for-Solidity.coverage.hide",
                "title": "Tools for Solidity: Hide Coverage"
            },
            {
                "command": "Tools-for-Solidity.init.detector",
                "title": "Tools for Solidity: New Detector"
            },
            {
                "command": "Tools-for-Solidity.init.global_detector",
                "title": "Tools for Solidity: New Global Detector"
            },
            {
                "command": "Tools-for-Solidity.init.printer",
                "title": "Tools for Solidity: New Printer"
            },
            {
                "command": "Tools-for-Solidity.init.global_printer",
                "title": "Tools for Solidity: New Global Printer"
            },
            {
                "command": "Tools-for-Solidity.detections.force_rerun_detectors",
                "title": "Tools for Solidity: Force Rerun Detectors",
                "icon": "$(refresh)"
            },
            {
                "command": "Tools-for-Solidity.detections.force_recompile",
                "title": "Tools for Solidity: Force Recompile Project",
                "icon": "$(refresh)"
            },
            {
                "command": "Tools-for-Solidity.detections.open_docs",
                "title": "Open Documentation",
                "icon": "$(book)"
            },
            {
                "command": "Tools-for-Solidity.detections.group.impact",
                "title": "Group by Impact"
            },
            {
                "command": "Tools-for-Solidity.detections.group.file",
                "title": "Group by File"
            },
            {
                "command": "Tools-for-Solidity.detections.group.confidence",
                "title": "Group by Confidence"
            },
            {
                "command": "Tools-for-Solidity.detections.group.detector",
                "title": "Group by Detector"
            },
            {
                "command": "Tools-for-Solidity.detections.filter.impact.high",
                "title": "Impact: High"
            },
            {
                "command": "Tools-for-Solidity.detections.filter.impact.medium",
                "title": "Impact: High/Medium"
            },
            {
                "command": "Tools-for-Solidity.detections.filter.impact.low",
                "title": "Impact: High/Medium/Low"
            },
            {
                "command": "Tools-for-Solidity.detections.filter.impact.warning",
                "title": "Impact: High/Medium/Low/Warning"
            },
            {
                "command": "Tools-for-Solidity.detections.filter.impact.info",
                "title": "Impact: All"
            },
            {
                "command": "Tools-for-Solidity.detections.filter.confidence.high",
                "title": "Confidence: High"
            },
            {
                "command": "Tools-for-Solidity.detections.filter.confidence.medium",
                "title": "Confidence: High/Medium"
            },
            {
                "command": "Tools-for-Solidity.detections.filter.confidence.low",
                "title": "Confidence: All"
            }
        ],
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "tools-for-solidity",
                    "title": "Tools for Solidity",
                    "icon": "resources/icons/activity_bar_wake.png"
                }
            ]
        },
        "views": {
            "tools-for-solidity": [
                {
                    "id": "wake-detections",
                    "name": "Wake Detections"
                },
                {
                    "id": "solc-detections",
                    "name": "Compiler"
                }
            ]
        },
        "menus": {
            "view/title": [
                {
                    "command": "Tools-for-Solidity.detections.force_rerun_detectors",
                    "when": "view == wake-detections",
                    "group": "navigation@3"
                },
                {
                    "submenu": "tools-for-solidity.detections.group",
                    "when": "view == wake-detections",
                    "group": "navigation@1"
                },
                {
                    "submenu": "tools-for-solidity.detections.filter",
                    "when": "view == wake-detections",
                    "group": "navigation@2"
                },
                {
                    "command": "Tools-for-Solidity.detections.force_recompile",
                    "when": "view == solc-detections",
                    "group": "navigation@3"
                }
            ],
            "view/item/context": [
                {
                    "command": "Tools-for-Solidity.detections.open_docs",
                    "when": "view == wake-detections && viewItem == DETECTOR",
                    "group": "inline"
                }
            ],
            "tools-for-solidity.detections.filter": [
                {
                    "command": "Tools-for-Solidity.detections.filter.impact.high",
                    "group": "1_impact@2"
                },
                {
                    "command": "Tools-for-Solidity.detections.filter.impact.medium",
                    "group": "1_impact@3"
                },
                {
                    "command": "Tools-for-Solidity.detections.filter.impact.low",
                    "group": "1_impact@4"
                },
                {
                    "command": "Tools-for-Solidity.detections.filter.impact.warning",
                    "group": "1_impact@5"
                },
                {
                    "command": "Tools-for-Solidity.detections.filter.impact.info",
                    "group": "1_impact@1"
                },
                {
                    "command": "Tools-for-Solidity.detections.filter.confidence.high",
                    "group": "2_confidence@2"
                },
                {
                    "command": "Tools-for-Solidity.detections.filter.confidence.medium",
                    "group": "2_confidence@3"
                },
                {
                    "command": "Tools-for-Solidity.detections.filter.confidence.low",
                    "group": "2_confidence@1"
                }
            ],
            "tools-for-solidity.detections.group": [
                {
                    "command": "Tools-for-Solidity.detections.group.file",
                    "group": "group@1"
                },
                {
                    "command": "Tools-for-Solidity.detections.group.impact",
                    "group": "group@2"
                },
                {
                    "command": "Tools-for-Solidity.detections.group.confidence",
                    "group": "group@3"
                },
                {
                    "command": "Tools-for-Solidity.detections.group.detector",
                    "group": "group@4"
                }
            ]
        },
        "submenus": [
            {
                "id": "tools-for-solidity.detections.filter",
                "label": "Filter",
                "icon": "$(filter)"
            },
            {
                "id": "tools-for-solidity.detections.group",
                "label": "Group by",
                "icon": "$(list-tree)"
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run package",
        "webpack": "webpack --mode development",
        "webpack-dev": "webpack --mode development --watch",
        "package": "webpack --mode production --devtool hidden-source-map",
        "test-compile": "tsc -p ./"
    },
    "devDependencies": {
        "@types/glob": "^7.2.0",
        "@types/mocha": "^9.1.1",
        "@types/node": "16.x",
        "@types/vscode": "^1.67.0",
        "@typescript-eslint/eslint-plugin": "^5.30.0",
        "@typescript-eslint/parser": "^5.30.0",
        "@vscode/test-electron": "^2.1.5",
        "@vscode/vsce": "^2.22.0",
        "eslint": "^8.18.0",
        "glob": "^8.0.3",
        "mocha": "^10.0.0",
        "ts-loader": "^9.4.1",
        "typescript": "^4.7.4",
        "webpack": "^5.88.2",
        "webpack-cli": "^4.10.0"
    },
    "dependencies": {
        "@renovatebot/pep440": "^2.0.0",
        "get-port": "<6.0.0",
        "node-fetch": "^3.3.2",
        "vscode-languageclient": "^8.0.1",
        "wait-port": "^0.3.0"
    },
    "extensionDependencies": [
        "EFanZh.graphviz-preview"
    ]
}
