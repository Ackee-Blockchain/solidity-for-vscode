{
    "name": "tools-for-solidity",
    "displayName": "Tools for Solidity",
    "version": "1.1.0",
    "publisher": "ackeeblockchain",
    "description": "Advanced Solidity support and vulnerability detectors developed by Ackee Blockchain",
    "keywords": [
        "solidity",
        "ethereum",
        "blockchain",
        "review",
        "audit",
        "security",
        "compiler",
        "solidity security"
    ],
    "homepage": "https://ackeeblockchain.com/blog/introducing-tools-for-solidity/",
    "bugs": {
        "url": "https://github.com/Ackee-Blockchain/tools-for-solidity-vscode/issues"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/Ackee-Blockchain/tools-for-solidity-vscode.git"
    },
    "icon": "images/icon.png",
    "engines": {
        "vscode": "^1.67.0"
    },
    "categories": [
        "Linters",
        "Programming Languages"
    ],
    "activationEvents": [
        "onLanguage:solidity",
        "workspaceContains:**/*.sol",
        "onLanguage:woke-output"
    ],
    "main": "./dist/extension",
    "contributes": {
        "configuration": {
            "title": "Tools for Solidity",
            "properties": {
                "woke.compiler.solc.allow_paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "Allow paths passed directly to the solc compiler"
                },
                "woke.compiler.solc.evm_version": {
                    "type": "string",
                    "enum": [
                        "homestead",
                        "tangerineWhistle",
                        "spuriousDragon",
                        "byzantium",
                        "constantinople",
                        "petersburg",
                        "istanbul",
                        "berlin",
                        "london",
                        ""
                    ],
                    "default": "",
                    "description": "EVM version passed to the solc compiler"
                },
                "woke.compiler.solc.ignore_paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "node_modules",
                        ".woke-build"
                    ],
                    "description": "Files in these paths are ignored from LSP analysis unless imported from other non-ignored files"
                },
                "woke.compiler.solc.include_paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "node_modules"
                    ],
                    "description": "Include paths used to search for non-relative import paths"
                },
                "woke.compiler.solc.remappings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "markdownDescription": "Compiler remappings (see [Solidity docs](https://docs.soliditylang.org/en/latest/using-the-compiler.html#base-path-and-import-remapping))"
                },
                "woke.compiler.solc.target_version": {
                    "type": "string",
                    "default": "",
                    "description": "The version of the solc compiler used to compile all project files"
                },
                "woke.compiler.solc.via_IR": {
                    "type": [
                        "boolean",
                        "null"
                    ],
                    "default": null,
                    "enum": [
                        null,
                        true,
                        false
                    ],
                    "markdownDescription": "Compile the code via the Yul intermediate language (see [Solidity docs](https://docs.soliditylang.org/en/latest/ir-breaking-changes.html)). If not set (null), let the compiler decide."
                },
                "woke.compiler.solc.optimizer.enabled": {
                    "type": [
                        "boolean",
                        "null"
                    ],
                    "default": null,
                    "enum": [
                        null,
                        true,
                        false
                    ],
                    "description": "Compile the project with solc optimizations enabled. Setting this to 'null' (unset) disables most of the available optimizations. Setting this to 'false' disables all optimizations for Solidity <0.8.6 and has the same behavior as 'null' for Solidity >=0.8.6."
                },
                "woke.detectors.exclude": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "List of detectors (identified by their string or integer IDs) to exclude from the analysis"
                },
                "woke.detectors.only": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "List of detectors (identified by their string or integer IDs) to only use in the analysis"
                },
                "woke.compiler.solc.optimizer.runs": {
                    "type": "number",
                    "default": 200,
                    "description": "Configuration of the optimizer specifying how many times the code is intended to be run. Lower values optimize more for initial deployment cost, while higher values optimize more for high-frequency usage."
                },
                "woke.generator.control_flow_graph.direction": {
                    "type": "string",
                    "enum": [
                        "TB",
                        "BT",
                        "LR",
                        "RL"
                    ],
                    "default": "TB",
                    "markdownDescription": "The direction of the generated control flow graph (see [Graphviz docs](https://graphviz.org/docs/attrs/rankdir/))"
                },
                "woke.generator.control_flow_graph.vscode_urls": {
                    "type": "boolean",
                    "default": true,
                    "description": "Generate vscode:// URLs in the generated control flow graph"
                },
                "woke.generator.inheritance_graph.direction": {
                    "type": "string",
                    "enum": [
                        "TB",
                        "BT",
                        "LR",
                        "RL"
                    ],
                    "default": "BT",
                    "markdownDescription": "The direction of the generated inheritance graph (see [Graphviz docs](https://graphviz.org/docs/attrs/rankdir/))"
                },
                "woke.generator.inheritance_graph.vscode_urls": {
                    "type": "boolean",
                    "default": true,
                    "description": "Generate vscode:// URLs in the generated inheritance graph"
                },
                "woke.generator.inheritance_graph_full.direction": {
                    "type": "string",
                    "enum": [
                        "TB",
                        "BT",
                        "LR",
                        "RL"
                    ],
                    "default": "BT",
                    "markdownDescription": "The direction of the inheritance graph generated for the whole project (see [Graphviz docs](https://graphviz.org/docs/attrs/rankdir/))"
                },
                "woke.generator.inheritance_graph_full.vscode_urls": {
                    "type": "boolean",
                    "default": true,
                    "description": "Generate vscode:// URLs in the inheritance graph generated for the whole project"
                },
                "woke.lsp.code_lens.enable": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable code lens with number of references"
                },
                "woke.lsp.detectors.enable": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable Woke vulnerability detectors"
                },
                "woke.lsp.find_references.include_declarations": {
                    "type": "boolean",
                    "default": false,
                    "description": "Also include declarations in 'Go to references' results"
                },
                "Tools-for-Solidity.trace.server": {
                    "scope": "window",
                    "type": "string",
                    "enum": [
                        "off",
                        "messages",
                        "verbose"
                    ],
                    "default": "off",
                    "description": "Traces the communication between VS Code and the language server."
                },
                "Tools-for-Solidity.Woke.autoInstall": {
                    "type": "boolean",
                    "default": "true",
                    "description": "Automatically install 'woke' PyPi package needed by Tools for Solidity"
                }
            }
        },
        "languages": [
            {
                "id": "solidity",
                "extensions": [
                    ".sol"
                ],
                "aliases": [
                    "Solidity",
                    "sol"
                ],
                "configuration": "./language-configuration.json"
            },
            {
                "id": "tools-for-solidity-output",
                "extensions": [
                    ".output"
                ],
                "configuration": "./resources/log.configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "solidity",
                "scopeName": "source.solidity",
                "path": "./syntaxes/solidity.tmLanguage.json"
            },
            {
                "language": "tools-for-solidity-output",
                "scopeName": "source.woke.output",
                "path": "./syntaxes/log.configuration.json"
            }
        ],
        "commands": [
            {
                "command": "woke.lsp.force_recompile",
                "title": "Tools for Solidity: Force Recompile Project"
            },
            {
                "command": "woke.lsp.force_rerun_detectors",
                "title": "Tools for Solidity: Force Rerun Detectors"
            },
            {
                "command": "Tools-for-Solidity.generate.inheritance_graph",
                "title": "Tools for Solidity: Generate Inheritance Graph"
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run package",
        "webpack": "webpack --mode development",
        "webpack-dev": "webpack --mode development --watch",
        "package": "webpack --mode production --devtool hidden-source-map",
        "test-compile": "tsc -p ./"
    },
    "devDependencies": {
        "@types/glob": "^7.2.0",
        "@types/mocha": "^9.1.1",
        "@types/node": "16.x",
        "@types/vscode": "^1.67.0",
        "@typescript-eslint/eslint-plugin": "^5.30.0",
        "@typescript-eslint/parser": "^5.30.0",
        "@vscode/test-electron": "^2.1.5",
        "eslint": "^8.18.0",
        "glob": "^8.0.3",
        "mocha": "^10.0.0",
        "ts-loader": "^9.4.1",
        "typescript": "^4.7.4",
        "webpack": "^5.74.0",
        "webpack-cli": "^4.10.0"
    },
    "dependencies": {
        "@renovatebot/pep440": "^2.0.0",
        "get-port": "<6.0.0",
        "vscode-languageclient": "^8.0.1",
        "wait-port": "^0.3.0"
    }
}
