import { useDeployContract, useReadContract } from 'wagmi';
import './App.css';

const abi = [
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_message",
                "type": "string"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "message",
        "outputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
]

function App() {
    const { deployContract } = useDeployContract();
    const { data: messageData, isLoading: isMessageLoading, isSuccess: isMessageSuccess, refetch: refetchMessage } = useReadContract({
        abi,
        address: '0x37a57e110f83858750002087f6d027450e1805b3',
        functionName: 'message',
    });

    const deploy = () => {
        deployContract({
            abi: abi,
            args: ['miau'],
            bytecode: "0x608060405234801561000f5575f80fd5b506040516106f03803806106f0833981810160405281019061003191906101ad565b805f908161003f9190610401565b50506104d0565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6100a58261005f565b810181811067ffffffffffffffff821117156100c4576100c361006f565b5b80604052505050565b5f6100d6610046565b90506100e2828261009c565b919050565b5f67ffffffffffffffff8211156101015761010061006f565b5b61010a8261005f565b9050602081019050919050565b5f5b83811015610134578082015181840152602081019050610119565b5f8484015250505050565b5f61015161014c846100e7565b6100cd565b90508281526020810184848401111561016d5761016c61005b565b5b610178848285610117565b509392505050565b5f82601f83011261019457610193610057565b5b81516101a484826020860161013f565b91505092915050565b5f602082840312156101c2576101c161004f565b5b5f82015167ffffffffffffffff8111156101df576101de610053565b5b6101eb84828501610180565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061024257607f821691505b602082108103610255576102546101fe565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026102b77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261027c565b6102c1868361027c565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6103056103006102fb846102d9565b6102e2565b6102d9565b9050919050565b5f819050919050565b61031e836102eb565b61033261032a8261030c565b848454610288565b825550505050565b5f90565b61034661033a565b610351818484610315565b505050565b5b81811015610374576103695f8261033e565b600181019050610357565b5050565b601f8211156103b95761038a8161025b565b6103938461026d565b810160208510156103a2578190505b6103b66103ae8561026d565b830182610356565b50505b505050565b5f82821c905092915050565b5f6103d95f19846008026103be565b1980831691505092915050565b5f6103f183836103ca565b9150826002028217905092915050565b61040a826101f4565b67ffffffffffffffff8111156104235761042261006f565b5b61042d825461022b565b610438828285610378565b5f60209050601f831160018114610469575f8415610457578287015190505b61046185826103e6565b8655506104c8565b601f1984166104778661025b565b5f5b8281101561049e57848901518255600182019150602085019450602081019050610479565b868310156104bb57848901516104b7601f8916826103ca565b8355505b6001600288020188555050505b505050505050565b610213806104dd5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063e21f37ce1461002d575b5f80fd5b61003561004b565b6040516100429190610160565b60405180910390f35b5f8054610057906101ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610083906101ad565b80156100ce5780601f106100a5576101008083540402835291602001916100ce565b820191905f5260205f20905b8154815290600101906020018083116100b157829003601f168201915b505050505081565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561010d5780820151818401526020810190506100f2565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610132826100d6565b61013c81856100e0565b935061014c8185602086016100f0565b61015581610118565b840191505092915050565b5f6020820190508181035f8301526101788184610128565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806101c457607f821691505b6020821081036101d7576101d6610180565b5b5091905056fea264697066735822122096f3f3d3ebc432d2c38f056df857d47baa628d38a1cffa965cea5aaa2503888a64736f6c63430008180033"
        });

        console.log(deployContract);
    }

    const getMessage = async () => {
        refetchMessage().then((res) => {
            console.log("refetch", res);
        });
        if (isMessageLoading) {
            console.log('Loading message...');
        } else if (isMessageSuccess) {
            console.log('Message:', messageData);
        } else {
            console.log('Failed to fetch message.');
        }
    }

    return (
        <div>
            <w3m-button />
            <button onClick={deploy}>Deploy Contract</button>
            <button onClick={getMessage}>Get Message</button>
        </div>
    )
}

export default App
